#!/bin/sh
yum update -y
amazon-linux-extras enable selinux-ng
yum install container-selinux

# Set up SSH Certificate Auth
echo "TrustedUserCAKeys /etc/ssh/ca-key.pub" >> /etc/ssh/sshd_config

curl -o /etc/ssh/ca-key.pub -H "X-Vault-Namespace: ${vault_namespace}" \
  ${vault_url}/v1/${vault_ssh_mount}/public_key
chown 1000:1000 /etc/ssh/ca-key.pub
chmod 644 /etc/ssh/ca-key.pub
systemctl restart sshd
useradd -d /home/pie_user pie_user
useradd -d /home/global_user global_user


# Set up K3s
curl -Ss http://169.254.169.254/1.0/meta-data/local-ipv4 > /etc/private_ip
host -t PTR $(cat /etc/private_ip) | awk '{print substr($NF, 1, length($NF)-1)}' > /etc/private_dns
sed -e 's/$/:30922/' < /etc/private_dns > /etc/boundary_worker_nodeport

curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.29.7+k3s1 INSTALL_K3S_EXEC=\"server\" sh -

# Set up postgresql pod
curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
helm repo add bitnami https://charts.bitnami.com/bitnami
KUBECONFIG=/etc/rancher/k3s/k3s.yaml helm install k8s-postgres --set auth.postgresPassword=${password} \
--set primary.service.type="NodePort" --set primary.service.nodePorts.postgresql="30932" \
--set auth.username="dev_user" --set auth.password=${password}} bitnami/postgresql

# Set up DokuWiki Pod
KUBECONFIG=/etc/rancher/k3s/k3s.yaml helm install wiki --set service.type="NodePort" --set service.nodePorts.http="30080" --set service.nodePorts.https="30443" bitnami/dokuwiki


# Set up Vault K8s secret engine role and rolebinding
cat <<EOF > role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-full-secrets-abilities-with-labels
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "serviceaccounts/token"]
  verbs: ["create", "update", "delete"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["rolebindings", "clusterrolebindings"]
  verbs: ["create", "update", "delete"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "clusterroles"]
  verbs: ["bind", "escalate", "create", "update", "delete"]
EOF

cat <<EOF > role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-token-creator-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-full-secrets-abilities-with-labels
subjects:
- kind: ServiceAccount
  name: vault
  namespace: vault
EOF

kubectl create namespace vault
kubectl create serviceaccount vault -n vault
kubectl apply -f role.yaml
kubectl apply -f role_binding.yaml

# Create Vault Token copy Token and CA Cert to parameter store for later use by Vault
kubectl create token vault --duration=999999h -n vault > /tmp/vault-token
aws ssm put-parameter --region us-west-2 --name token --value file:///tmp/vault-token --type String --overwrite

sleep 30
kubectl get cm kube-root-ca.crt -o jsonpath="{['data']['ca\.crt']}" > /tmp/cert
aws ssm put-parameter --region us-west-2 --name cert --value file:///tmp/cert --type String --overwrite

# Save Kubeconfig file to SSM
aws ssm put-parameter --region us-west-2 --name kubeconfig --value file:///etc/rancher/k3s/k3s.yaml --type String --overwrite